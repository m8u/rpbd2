/* 
 * rpbdrgr
 *
 * rpbdrgr
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Cruise
    /// </summary>
    [DataContract]
    public partial class Cruise :  IEquatable<Cruise>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cruise" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="ship">ship.</param>
        /// <param name="generalcargotype">generalcargotype.</param>
        /// <param name="departureport">departureport.</param>
        /// <param name="destinationport">destinationport.</param>
        /// <param name="portentries">portentries.</param>
        /// <param name="charterer">charterer.</param>
        public Cruise(long? id = default(long?), long? ship = default(long?), long? generalcargotype = default(long?), long? departureport = default(long?), long? destinationport = default(long?), List<PortEntry> portentries = default(List<PortEntry>), long? charterer = default(long?))
        {
            this.Id = id;
            this.Ship = ship;
            this.Generalcargotype = generalcargotype;
            this.Departureport = departureport;
            this.Destinationport = destinationport;
            this.Portentries = portentries;
            this.Charterer = charterer;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Ship
        /// </summary>
        [DataMember(Name="ship", EmitDefaultValue=false)]
        public long? Ship { get; set; }

        /// <summary>
        /// Gets or Sets Generalcargotype
        /// </summary>
        [DataMember(Name="generalcargotype", EmitDefaultValue=false)]
        public long? Generalcargotype { get; set; }

        /// <summary>
        /// Gets or Sets Departureport
        /// </summary>
        [DataMember(Name="departureport", EmitDefaultValue=false)]
        public long? Departureport { get; set; }

        /// <summary>
        /// Gets or Sets Destinationport
        /// </summary>
        [DataMember(Name="destinationport", EmitDefaultValue=false)]
        public long? Destinationport { get; set; }

        /// <summary>
        /// Gets or Sets Portentries
        /// </summary>
        [DataMember(Name="portentries", EmitDefaultValue=false)]
        public List<PortEntry> Portentries { get; set; }

        /// <summary>
        /// Gets or Sets Charterer
        /// </summary>
        [DataMember(Name="charterer", EmitDefaultValue=false)]
        public long? Charterer { get; set; }

        public Charterer Charterer1
        {
            get => default;
            set
            {
            }
        }

        public Port Port
        {
            get => default;
            set
            {
            }
        }

        public Port Port1
        {
            get => default;
            set
            {
            }
        }

        public GeneralCargoType GeneralCargoType
        {
            get => default;
            set
            {
            }
        }

        public Ship Ship1
        {
            get => default;
            set
            {
            }
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cruise {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ship: ").Append(Ship).Append("\n");
            sb.Append("  Generalcargotype: ").Append(Generalcargotype).Append("\n");
            sb.Append("  Departureport: ").Append(Departureport).Append("\n");
            sb.Append("  Destinationport: ").Append(Destinationport).Append("\n");
            sb.Append("  Portentries: ").Append(Portentries).Append("\n");
            sb.Append("  Charterer: ").Append(Charterer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cruise);
        }

        /// <summary>
        /// Returns true if Cruise instances are equal
        /// </summary>
        /// <param name="input">Instance of Cruise to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cruise input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Ship == input.Ship ||
                    (this.Ship != null &&
                    this.Ship.Equals(input.Ship))
                ) && 
                (
                    this.Generalcargotype == input.Generalcargotype ||
                    (this.Generalcargotype != null &&
                    this.Generalcargotype.Equals(input.Generalcargotype))
                ) && 
                (
                    this.Departureport == input.Departureport ||
                    (this.Departureport != null &&
                    this.Departureport.Equals(input.Departureport))
                ) && 
                (
                    this.Destinationport == input.Destinationport ||
                    (this.Destinationport != null &&
                    this.Destinationport.Equals(input.Destinationport))
                ) && 
                (
                    this.Portentries == input.Portentries ||
                    this.Portentries != null &&
                    this.Portentries.SequenceEqual(input.Portentries)
                ) && 
                (
                    this.Charterer == input.Charterer ||
                    (this.Charterer != null &&
                    this.Charterer.Equals(input.Charterer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Ship != null)
                    hashCode = hashCode * 59 + this.Ship.GetHashCode();
                if (this.Generalcargotype != null)
                    hashCode = hashCode * 59 + this.Generalcargotype.GetHashCode();
                if (this.Departureport != null)
                    hashCode = hashCode * 59 + this.Departureport.GetHashCode();
                if (this.Destinationport != null)
                    hashCode = hashCode * 59 + this.Destinationport.GetHashCode();
                if (this.Portentries != null)
                    hashCode = hashCode * 59 + this.Portentries.GetHashCode();
                if (this.Charterer != null)
                    hashCode = hashCode * 59 + this.Charterer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

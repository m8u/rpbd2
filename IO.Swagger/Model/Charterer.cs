/* 
 * rpbdrgr
 *
 * rpbdrgr
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Charterer
    /// </summary>
    [DataContract]
    public partial class Charterer :  IEquatable<Charterer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Charterer" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="address">address.</param>
        /// <param name="phonenumber">phonenumber.</param>
        /// <param name="fax">fax.</param>
        /// <param name="email">email.</param>
        /// <param name="bankname">bankname.</param>
        /// <param name="bankcity">bankcity.</param>
        /// <param name="tin">tin.</param>
        /// <param name="bankaccount">bankaccount.</param>
        public Charterer(long? id = default(long?), string name = default(string), string address = default(string), string phonenumber = default(string), string fax = default(string), string email = default(string), string bankname = default(string), string bankcity = default(string), string tin = default(string), string bankaccount = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Address = address;
            this.Phonenumber = phonenumber;
            this.Fax = fax;
            this.Email = email;
            this.Bankname = bankname;
            this.Bankcity = bankcity;
            this.Tin = tin;
            this.Bankaccount = bankaccount;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Phonenumber
        /// </summary>
        [DataMember(Name="phonenumber", EmitDefaultValue=false)]
        public string Phonenumber { get; set; }

        /// <summary>
        /// Gets or Sets Fax
        /// </summary>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Bankname
        /// </summary>
        [DataMember(Name="bankname", EmitDefaultValue=false)]
        public string Bankname { get; set; }

        /// <summary>
        /// Gets or Sets Bankcity
        /// </summary>
        [DataMember(Name="bankcity", EmitDefaultValue=false)]
        public string Bankcity { get; set; }

        /// <summary>
        /// Gets or Sets Tin
        /// </summary>
        [DataMember(Name="tin", EmitDefaultValue=false)]
        public string Tin { get; set; }

        /// <summary>
        /// Gets or Sets Bankaccount
        /// </summary>
        [DataMember(Name="bankaccount", EmitDefaultValue=false)]
        public string Bankaccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Charterer {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Phonenumber: ").Append(Phonenumber).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Bankname: ").Append(Bankname).Append("\n");
            sb.Append("  Bankcity: ").Append(Bankcity).Append("\n");
            sb.Append("  Tin: ").Append(Tin).Append("\n");
            sb.Append("  Bankaccount: ").Append(Bankaccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Charterer);
        }

        /// <summary>
        /// Returns true if Charterer instances are equal
        /// </summary>
        /// <param name="input">Instance of Charterer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Charterer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Phonenumber == input.Phonenumber ||
                    (this.Phonenumber != null &&
                    this.Phonenumber.Equals(input.Phonenumber))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Bankname == input.Bankname ||
                    (this.Bankname != null &&
                    this.Bankname.Equals(input.Bankname))
                ) && 
                (
                    this.Bankcity == input.Bankcity ||
                    (this.Bankcity != null &&
                    this.Bankcity.Equals(input.Bankcity))
                ) && 
                (
                    this.Tin == input.Tin ||
                    (this.Tin != null &&
                    this.Tin.Equals(input.Tin))
                ) && 
                (
                    this.Bankaccount == input.Bankaccount ||
                    (this.Bankaccount != null &&
                    this.Bankaccount.Equals(input.Bankaccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Phonenumber != null)
                    hashCode = hashCode * 59 + this.Phonenumber.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Bankname != null)
                    hashCode = hashCode * 59 + this.Bankname.GetHashCode();
                if (this.Bankcity != null)
                    hashCode = hashCode * 59 + this.Bankcity.GetHashCode();
                if (this.Tin != null)
                    hashCode = hashCode * 59 + this.Tin.GetHashCode();
                if (this.Bankaccount != null)
                    hashCode = hashCode * 59 + this.Bankaccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

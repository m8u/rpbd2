/* 
 * rpbdrgr
 *
 * rpbdrgr
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CrewMember
    /// </summary>
    [DataContract]
    public partial class CrewMember :  IEquatable<CrewMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrewMember" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="firstname">firstname.</param>
        /// <param name="lastname">lastname.</param>
        /// <param name="patronymic">patronymic.</param>
        /// <param name="ship">ship.</param>
        /// <param name="birthdate">birthdate.</param>
        /// <param name="role">role.</param>
        /// <param name="experience">experience.</param>
        /// <param name="salary">salary.</param>
        public CrewMember(long? id = default(long?), string firstname = default(string), string lastname = default(string), string patronymic = default(string), long? ship = default(long?), string birthdate = default(string), long? role = default(long?), long? experience = default(long?), long? salary = default(long?))
        {
            this.Id = id;
            this.Firstname = firstname;
            this.Lastname = lastname;
            this.Patronymic = patronymic;
            this.Ship = ship;
            this.Birthdate = birthdate;
            this.Role = role;
            this.Experience = experience;
            this.Salary = salary;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Firstname
        /// </summary>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// Gets or Sets Lastname
        /// </summary>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// Gets or Sets Patronymic
        /// </summary>
        [DataMember(Name="patronymic", EmitDefaultValue=false)]
        public string Patronymic { get; set; }

        /// <summary>
        /// Gets or Sets Ship
        /// </summary>
        [DataMember(Name="ship", EmitDefaultValue=false)]
        public long? Ship { get; set; }

        /// <summary>
        /// Gets or Sets Birthdate
        /// </summary>
        [DataMember(Name="birthdate", EmitDefaultValue=false)]
        public string Birthdate { get; set; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public long? Role { get; set; }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [DataMember(Name="experience", EmitDefaultValue=false)]
        public long? Experience { get; set; }

        /// <summary>
        /// Gets or Sets Salary
        /// </summary>
        [DataMember(Name="salary", EmitDefaultValue=false)]
        public long? Salary { get; set; }

        public Role Role1
        {
            get => default;
            set
            {
            }
        }

        public Ship Ship1
        {
            get => default;
            set
            {
            }
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CrewMember {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Patronymic: ").Append(Patronymic).Append("\n");
            sb.Append("  Ship: ").Append(Ship).Append("\n");
            sb.Append("  Birthdate: ").Append(Birthdate).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  Salary: ").Append(Salary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CrewMember);
        }

        /// <summary>
        /// Returns true if CrewMember instances are equal
        /// </summary>
        /// <param name="input">Instance of CrewMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CrewMember input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                ) && 
                (
                    this.Patronymic == input.Patronymic ||
                    (this.Patronymic != null &&
                    this.Patronymic.Equals(input.Patronymic))
                ) && 
                (
                    this.Ship == input.Ship ||
                    (this.Ship != null &&
                    this.Ship.Equals(input.Ship))
                ) && 
                (
                    this.Birthdate == input.Birthdate ||
                    (this.Birthdate != null &&
                    this.Birthdate.Equals(input.Birthdate))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.Experience == input.Experience ||
                    (this.Experience != null &&
                    this.Experience.Equals(input.Experience))
                ) && 
                (
                    this.Salary == input.Salary ||
                    (this.Salary != null &&
                    this.Salary.Equals(input.Salary))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Lastname != null)
                    hashCode = hashCode * 59 + this.Lastname.GetHashCode();
                if (this.Patronymic != null)
                    hashCode = hashCode * 59 + this.Patronymic.GetHashCode();
                if (this.Ship != null)
                    hashCode = hashCode * 59 + this.Ship.GetHashCode();
                if (this.Birthdate != null)
                    hashCode = hashCode * 59 + this.Birthdate.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.Experience != null)
                    hashCode = hashCode * 59 + this.Experience.GetHashCode();
                if (this.Salary != null)
                    hashCode = hashCode * 59 + this.Salary.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

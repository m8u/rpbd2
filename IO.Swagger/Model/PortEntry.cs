/* 
 * rpbdrgr
 *
 * rpbdrgr
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// PortEntry
    /// </summary>
    [DataContract]
    public partial class PortEntry :  IEquatable<PortEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortEntry" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="port">port.</param>
        /// <param name="cruise">cruise.</param>
        /// <param name="destinationdateplanned">destinationdateplanned.</param>
        /// <param name="departuredateplanned">departuredateplanned.</param>
        /// <param name="destinationdateactual">destinationdateactual.</param>
        /// <param name="departuredateactual">departuredateactual.</param>
        /// <param name="destinationdelayreason">destinationdelayreason.</param>
        /// <param name="departuredelayreason">departuredelayreason.</param>
        public PortEntry(long? id = default(long?), long? port = default(long?), long? cruise = default(long?), DateTime? destinationdateplanned = default(DateTime?), DateTime? departuredateplanned = default(DateTime?), DateTime? destinationdateactual = default(DateTime?), DateTime? departuredateactual = default(DateTime?), string destinationdelayreason = default(string), string departuredelayreason = default(string))
        {
            this.Id = id;
            this.Port = port;
            this.Cruise = cruise;
            this.Destinationdateplanned = destinationdateplanned;
            this.Departuredateplanned = departuredateplanned;
            this.Destinationdateactual = destinationdateactual;
            this.Departuredateactual = departuredateactual;
            this.Destinationdelayreason = destinationdelayreason;
            this.Departuredelayreason = departuredelayreason;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Port
        /// </summary>
        [DataMember(Name="port", EmitDefaultValue=false)]
        public long? Port { get; set; }

        /// <summary>
        /// Gets or Sets Cruise
        /// </summary>
        [DataMember(Name="cruise", EmitDefaultValue=false)]
        public long? Cruise { get; set; }

        /// <summary>
        /// Gets or Sets Destinationdateplanned
        /// </summary>
        [DataMember(Name="destinationdateplanned", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Destinationdateplanned { get; set; }

        /// <summary>
        /// Gets or Sets Departuredateplanned
        /// </summary>
        [DataMember(Name="departuredateplanned", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Departuredateplanned { get; set; }

        /// <summary>
        /// Gets or Sets Destinationdateactual
        /// </summary>
        [DataMember(Name="destinationdateactual", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Destinationdateactual { get; set; }

        /// <summary>
        /// Gets or Sets Departuredateactual
        /// </summary>
        [DataMember(Name="departuredateactual", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Departuredateactual { get; set; }

        /// <summary>
        /// Gets or Sets Destinationdelayreason
        /// </summary>
        [DataMember(Name="destinationdelayreason", EmitDefaultValue=false)]
        public string Destinationdelayreason { get; set; }

        /// <summary>
        /// Gets or Sets Departuredelayreason
        /// </summary>
        [DataMember(Name="departuredelayreason", EmitDefaultValue=false)]
        public string Departuredelayreason { get; set; }

        public Cruise Cruise1
        {
            get => default;
            set
            {
            }
        }

        public Port Port1
        {
            get => default;
            set
            {
            }
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PortEntry {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Cruise: ").Append(Cruise).Append("\n");
            sb.Append("  Destinationdateplanned: ").Append(Destinationdateplanned).Append("\n");
            sb.Append("  Departuredateplanned: ").Append(Departuredateplanned).Append("\n");
            sb.Append("  Destinationdateactual: ").Append(Destinationdateactual).Append("\n");
            sb.Append("  Departuredateactual: ").Append(Departuredateactual).Append("\n");
            sb.Append("  Destinationdelayreason: ").Append(Destinationdelayreason).Append("\n");
            sb.Append("  Departuredelayreason: ").Append(Departuredelayreason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PortEntry);
        }

        /// <summary>
        /// Returns true if PortEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of PortEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PortEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Port == input.Port ||
                    (this.Port != null &&
                    this.Port.Equals(input.Port))
                ) && 
                (
                    this.Cruise == input.Cruise ||
                    (this.Cruise != null &&
                    this.Cruise.Equals(input.Cruise))
                ) && 
                (
                    this.Destinationdateplanned == input.Destinationdateplanned ||
                    (this.Destinationdateplanned != null &&
                    this.Destinationdateplanned.Equals(input.Destinationdateplanned))
                ) && 
                (
                    this.Departuredateplanned == input.Departuredateplanned ||
                    (this.Departuredateplanned != null &&
                    this.Departuredateplanned.Equals(input.Departuredateplanned))
                ) && 
                (
                    this.Destinationdateactual == input.Destinationdateactual ||
                    (this.Destinationdateactual != null &&
                    this.Destinationdateactual.Equals(input.Destinationdateactual))
                ) && 
                (
                    this.Departuredateactual == input.Departuredateactual ||
                    (this.Departuredateactual != null &&
                    this.Departuredateactual.Equals(input.Departuredateactual))
                ) && 
                (
                    this.Destinationdelayreason == input.Destinationdelayreason ||
                    (this.Destinationdelayreason != null &&
                    this.Destinationdelayreason.Equals(input.Destinationdelayreason))
                ) && 
                (
                    this.Departuredelayreason == input.Departuredelayreason ||
                    (this.Departuredelayreason != null &&
                    this.Departuredelayreason.Equals(input.Departuredelayreason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Port != null)
                    hashCode = hashCode * 59 + this.Port.GetHashCode();
                if (this.Cruise != null)
                    hashCode = hashCode * 59 + this.Cruise.GetHashCode();
                if (this.Destinationdateplanned != null)
                    hashCode = hashCode * 59 + this.Destinationdateplanned.GetHashCode();
                if (this.Departuredateplanned != null)
                    hashCode = hashCode * 59 + this.Departuredateplanned.GetHashCode();
                if (this.Destinationdateactual != null)
                    hashCode = hashCode * 59 + this.Destinationdateactual.GetHashCode();
                if (this.Departuredateactual != null)
                    hashCode = hashCode * 59 + this.Departuredateactual.GetHashCode();
                if (this.Destinationdelayreason != null)
                    hashCode = hashCode * 59 + this.Destinationdelayreason.GetHashCode();
                if (this.Departuredelayreason != null)
                    hashCode = hashCode * 59 + this.Departuredelayreason.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
